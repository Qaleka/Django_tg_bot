from telebot import TeleBot, types
import logging
import os
import requests
from django.core.cache import cache
import os
import django
from django.utils.timezone import now
from django.conf import settings
from datetime import datetime
from bot_app.oauth import set_user_state, get_user_state
from pytz import timezone, utc
from pytz import timezone as pytz_timezone
from dotenv import load_dotenv
from datetime import timedelta
from functools import lru_cache

MOSCOW_TZ = timezone('Europe/Moscow')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'bauman_event_tg_bot.settings')
django.setup()
load_dotenv()  # –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
from .models import User, Student, Teacher, Group, Event, StudentSubmission, EventResponse
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
bot = TeleBot(TOKEN)
BACKEND_URL = "https://baumeventbot.ru"

API_URL = f"https://science.iu5.bmstu.ru/sso/authorize?redirect_uri={BACKEND_URL}/oauth_callback"

def require_auth(handler_func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    def wrapper(message, *args, **kwargs):
        telegram_id = message.chat.id
        if not User.objects.filter(telegram_id=telegram_id).exists():
            auth_url = f"{API_URL}?tg=telegram_id={telegram_id}"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", url=auth_url))
            bot.send_message(
                telegram_id,
                "‚ùó –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.",
                reply_markup=markup
            )
            return
        return handler_func(message, *args, **kwargs)
    return wrapper


# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–≥–æ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
def set_bot_commands():
    commands = [
        types.BotCommand("start", "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"),
        types.BotCommand("calendar", "–û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å —Å–æ–±—ã—Ç–∏–π"),
        types.BotCommand("create_event", "–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ"),
        types.BotCommand("events", "–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π"),
        types.BotCommand("delete_event", "–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ (–¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)"),
        types.BotCommand("send_file", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é"),
        types.BotCommand("received_files", "–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∑–∞ –º–µ—Å—è—Ü"),
        types.BotCommand("responses", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç—É—Å —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –ø–æ —Å–æ–±—ã—Ç–∏—è–º")
    ]
    bot.set_my_commands(commands)


@bot.message_handler(commands=['start'])
def start(message):
    set_user_state(message.chat.id, None)
    
    bot.send_chat_action(message.chat.id, 'typing')
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞.",
        reply_markup=types.ReplyKeyboardRemove()
    )
    
    auth_url = f"{API_URL}?tg=telegram_id={message.chat.id}"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", url=auth_url))
    
    bot.send_message(
        message.chat.id,
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:",
        reply_markup=markup
    )

@bot.message_handler(func=lambda message: message.text in ['–î–∞', '–ù–µ—Ç'])
@require_auth
def handle_teacher_response(message):
    telegram_id = message.chat.id
    response = message.text

    if get_user_state(telegram_id) != "awaiting_teacher_response":
        return

    try:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ø–æ telegram_id
        user = User.objects.get(telegram_id=telegram_id)

        if response == '–î–∞':
            teacher, created = Teacher.objects.get_or_create(user=user)
            bot.send_message(telegram_id, "–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å.")
        else:
            bot.send_message(telegram_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã:")
            bot.register_next_step_handler(message, handle_group_input, user)

        set_user_state(telegram_id, None)

    except User.DoesNotExist:
        bot.send_message(telegram_id, "–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        bot.send_message(telegram_id, f"–û—à–∏–±–∫–∞: {str(e)}")

@lru_cache
def get_valid_groups():
    with open("extracted_groups.txt", "r", encoding="utf-8") as f:
        return set(line.strip() for line in f if line.strip())

def handle_group_input(message, user):
    telegram_id = message.chat.id
    group_name = message.text.strip()

    valid_groups = get_valid_groups()

    if group_name not in valid_groups:
        bot.send_message(telegram_id, "–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑:")
        bot.register_next_step_handler(message, handle_group_input, user)
        return

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–∞—è –≥—Ä—É–ø–ø–∞ –≤ –ë–î
        group, _ = Group.objects.get_or_create(name=group_name)

        # –ü—Ä–∏–≤—è–∑–∫–∞ —Å—Ç—É–¥–µ–Ω—Ç–∞
        student, _ = Student.objects.get_or_create(user=user)
        student.group = group
        student.save()

        bot.send_message(telegram_id, f"–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ —Å—Ç—É–¥–µ–Ω—Ç –≥—Ä—É–ø–ø—ã {group_name}.")
        set_user_state(telegram_id, None)

    except Exception as e:
        bot.send_message(telegram_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")

@bot.message_handler(commands=['–æ—Ç–º–µ–Ω–∞', 'cancel'])
def handle_cancel(message):
    telegram_id = message.chat.id

    if telegram_id in event_data:
        del event_data[telegram_id]

    bot.send_message(telegram_id, "–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ —Å–æ–±—ã—Ç–∏–∏
event_data = {}

@bot.message_handler(commands=['create_event'])
@require_auth
def handle_create_event(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /create_event"""
    telegram_id = message.chat.id

    try:
        user = User.objects.get(telegram_id=telegram_id)
        teacher = Teacher.objects.get(user=user)
    except (User.DoesNotExist, Teacher.DoesNotExist):
        bot.send_message(telegram_id, "–¢–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è.")
        return

    bot.send_message(telegram_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
    bot.register_next_step_handler(message, process_title_step)

def process_title_step(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    telegram_id = message.chat.id

    if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel']:
        handle_cancel(message)
        return

    event_data[telegram_id] = {'title': message.text}

    bot.send_message(telegram_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –æ—Ç–º–µ–Ω—ã):")
    bot.register_next_step_handler(message, process_description_step)

def process_description_step(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    telegram_id = message.chat.id

    if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel']:
        handle_cancel(message)
        return

    event_data[telegram_id]['description'] = message.text

    webapp_url = f"{BACKEND_URL}/select_date/?tgid={telegram_id}"
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É", web_app=types.WebAppInfo(url=webapp_url)))
    bot.send_message(telegram_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—å:", reply_markup=markup)

@bot.message_handler(content_types=['web_app_data'])
def handle_webapp_date(message):
    telegram_id = message.chat.id
    data = message.web_app_data.data.strip()

    try:
        naive_dt = datetime.strptime(data, "%Y-%m-%d %H:%M")
        moscow = timezone("Europe/Moscow")
        aware_dt = moscow.localize(naive_dt)
        event_data[telegram_id]['date'] = aware_dt

        groups = Group.objects.all()
        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        for group in groups:
            markup.add(types.KeyboardButton(group.name))
        bot.send_message(telegram_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã (–≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", reply_markup=markup)
        bot.register_next_step_handler(message, process_groups_step)

    except Exception as e:
        bot.send_message(telegram_id, f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ –¥–∞—Ç—ã: {str(e)}")
        process_description_step(message)


def process_date_step(message):
    telegram_id = message.chat.id

    if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel']:
        handle_cancel(message)
        return

    try:
        naive_dt = datetime.strptime(message.text, "%Y-%m-%d %H:%M")
        moscow = timezone("Europe/Moscow")
        aware_dt = moscow.localize(naive_dt)
        event_data[telegram_id]['date'] = aware_dt

        groups = Group.objects.all()
        if not groups:
            bot.send_message(telegram_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø.")
            return

        markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
        for group in groups:
            markup.add(types.KeyboardButton(group.name))
        bot.send_message(telegram_id, "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—ã (–≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):", reply_markup=markup)
        bot.register_next_step_handler(message, process_groups_step)

    except ValueError:
        bot.send_message(telegram_id, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ (–≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú):")
        bot.register_next_step_handler(message, process_date_step)

def process_groups_step(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø"""
    telegram_id = message.chat.id

    if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel']:
        handle_cancel(message)
        return

    selected_groups = message.text.split(', ')
    event_data[telegram_id]['groups'] = Group.objects.filter(name__in=selected_groups)

    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    markup.add('–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è', '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ', '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ', '–†–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏', '–ï–∂–µ–º–µ—Å—è—á–Ω–æ')
    bot.send_message(telegram_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è(—Ä–∞–∑ –≤ –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ):", reply_markup=markup)
    bot.register_next_step_handler(message, process_recurrence_step)

def process_recurrence_step(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∏–ø–∞ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"""
    telegram_id = message.chat.id

    if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel']:
        handle_cancel(message)
        return

    recurrence_mapping = {
        '–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è': 'none',
        '–ï–∂–µ–¥–Ω–µ–≤–Ω–æ': 'daily',
        '–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ': 'weekly',
        '–†–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏': 'biweekly',
        '–ï–∂–µ–º–µ—Å—è—á–Ω–æ': 'monthly',
    }
    event_data[telegram_id]['recurrence'] = recurrence_mapping.get(message.text, 'none')

    bot.send_message(telegram_id, "–ü—Ä–∏–ª–æ–∂–∏—Ç–µ —Ñ–∞–π–ª (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ, –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")
    bot.register_next_step_handler(message, process_file_step)


def process_file_step(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞"""
    telegram_id = message.chat.id

    if message.text and message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel']:
        handle_cancel(message)
        return

    if message.document:
        file_id = message.document.file_id
        file_info = bot.get_file(file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_name = message.document.file_name

        os.makedirs(os.path.join(settings.MEDIA_ROOT, 'event_files'), exist_ok=True)

        file_path = os.path.join(settings.MEDIA_ROOT, 'event_files', file_name)
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)
        event_data[telegram_id]['file'] = file_path
    else:
        event_data[telegram_id]['file'] = None

    create_event_from_data(telegram_id)

def create_event_from_data(telegram_id):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    data = event_data.get(telegram_id)
    if not data:
        bot.send_message(telegram_id, "–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    try:
        user = User.objects.get(telegram_id=telegram_id)
        teacher = Teacher.objects.get(user=user)

        event = Event.objects.create(
            title=data['title'],
            description=data['description'],
            date=data['date'],
            teacher=teacher,
            file=data['file'],
            recurrence=data.get('recurrence', 'none')
        )

        event.groups.set(data['groups'])

        for group in data['groups']:
            students = Student.objects.filter(group=group)
            for student in students:
                if student.user.telegram_id:
                    recurrence_info = get_recurrence_info(event)
                    message = (
                        f"–ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:\n"
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event.title}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.description}\n"
                        f"–î–∞—Ç–∞: {event.date}\n"
                        f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {recurrence_info}\n"
                        f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å:{event.teacher.user.secondName} {event.teacher.user.firstname} {event.teacher.user.middlename}\n"
                    )
                    EventResponse.objects.get_or_create(event=event, student=student, defaults={'response': 'pending'})
                    bot.send_message(student.user.telegram_id, message)
                    if event.file:
                        with open(event.file.path, 'rb') as file:
                            bot.send_document(student.user.telegram_id, file)
                    markup = types.InlineKeyboardMarkup()
                    markup.add(
                        types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–¥—É", callback_data=f"event_yes_{event.id}"),
                        types.InlineKeyboardButton("‚ùå –ù–µ –ø—Ä–∏–¥—É", callback_data=f"event_no_{event.id}")
                    )
                    bot.send_message(student.user.telegram_id, "–í—ã –ø—Ä–∏–º–µ—Ç–µ —É—á–∞—Å—Ç–∏–µ?", reply_markup=markup)

        bot.send_message(telegram_id, "–°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    except Exception as e:
        bot.send_message(telegram_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}")
    finally:
        if telegram_id in event_data:
            del event_data[telegram_id]


@bot.message_handler(commands=['events'])
@require_auth
def handle_events(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /events"""
    msk = pytz_timezone("Europe/Moscow")
    telegram_id = message.chat.id

    try:
        user = User.objects.get(telegram_id=telegram_id)

        try:
            student = Student.objects.get(user=user)
            declined_ids = set(
                student.eventresponse_set.filter(response='no').values_list('event_id', flat=True)
            )
            events = Event.objects.filter(groups=student.group).exclude(id__in=declined_ids)
            if events:
                response = "–í–∞—à–∏ —Å–æ–±—ã—Ç–∏—è:\n"
                for event in events:
                    recurrence_info = get_recurrence_info(event)
                    response += (
                        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event.title}\n"
                        f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.description}\n"
                        f"–î–∞—Ç–∞: {event.date.astimezone(msk).strftime('%Y-%m-%d %H:%M')}\n"
                        f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {recurrence_info}\n"
                        f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {event.teacher.user.secondName} {event.teacher.user.firstname} {event.teacher.user.middlename}\n\n"
                    )
            else:
                response = "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π."
        except Student.DoesNotExist:
            try:
                teacher = Teacher.objects.get(user=user)
                events = Event.objects.filter(teacher=teacher)
                if events:
                    response = "–í–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:\n"
                    for event in events:
                        recurrence_info = get_recurrence_info(event)
                        response += (
                            f"–ù–∞–∑–≤–∞–Ω–∏–µ: {event.title}\n"
                            f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.description}\n"
                            f"–î–∞—Ç–∞: {event.date.astimezone(msk).strftime('%Y-%m-%d %H:%M')}\n"
                            f"–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ: {recurrence_info}\n"
                            f"–ì—Ä—É–ø–ø—ã: {', '.join([group.name for group in event.groups.all()])}\n\n"
                        )
                else:
                    response = "–í—ã –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è."
            except Teacher.DoesNotExist:
                response = "–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –Ω–∏ —Å—Ç—É–¥–µ–Ω—Ç–æ–º, –Ω–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º."

        bot.send_message(telegram_id, response)
    except User.DoesNotExist:
        bot.send_message(telegram_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        bot.send_message(telegram_id, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.message_handler(commands=['calendar'])
@require_auth
def handle_calendar(message):
    webapp_url = f"{BACKEND_URL}/calendar/?tgid={message.chat.id}"
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton(
        "üìÖ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", 
        web_app=types.WebAppInfo(url=webapp_url)
    ))
    
    bot.send_message(
        message.chat.id,
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è:",
        reply_markup=markup
    )

def get_recurrence_info(event):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    if event.recurrence == 'none':
        return "–ë–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è"
    elif event.recurrence == 'daily':
        return "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ"
    elif event.recurrence == 'weekly':
        return "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ"
    elif event.recurrence == 'monthly':
        return "–ï–∂–µ–º–µ—Å—è—á–Ω–æ"
    elif event.recurrence == 'biweekly':
        return "–†–∞–∑ –≤ 2 –Ω–µ–¥–µ–ª–∏"
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

@bot.message_handler(commands=['delete_event'])
@require_auth
def handle_delete_event(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π)"""
    telegram_id = message.chat.id
    
    try:
        user = User.objects.get(telegram_id=telegram_id)
        teacher = Teacher.objects.get(user=user)
        
        events = Event.objects.filter(teacher=teacher)
        
        if not events:
            bot.send_message(telegram_id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
            return
            
        markup = types.InlineKeyboardMarkup()
        for event in events:
            markup.add(types.InlineKeyboardButton(
                f"{event.title} ({event.date.strftime('%d.%m.%Y')})",
                callback_data=f"delete_event_{event.id}"
            ))
            
        bot.send_message(
            telegram_id,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
            reply_markup=markup
        )
        
    except Teacher.DoesNotExist:
        bot.send_message(telegram_id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º.")
    except Exception as e:
        bot.send_message(telegram_id, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('delete_event_'))
def confirm_deletion(call):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        event_id = int(call.data.split('_')[2])
        event = Event.objects.get(id=event_id)
        
        markup = types.InlineKeyboardMarkup()
        markup.row(
            types.InlineKeyboardButton("‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"confirm_delete_{event.id}"),
            types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_delete")
        )
        
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ '{event.title}'?",
            reply_markup=markup
        )
        
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_delete_'))
def delete_event_and_notify(call):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    try:
        event_id = int(call.data.split('_')[2])
        event = Event.objects.get(id=event_id)
        event_title = event.title
        groups = list(event.groups.all())
        
        event.delete()
        
        bot.answer_callback_query(call.id, "–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ")
        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=f"–°–æ–±—ã—Ç–∏–µ '{event_title}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ."
        )
        
        for group in groups:
            for student in group.student_set.all():
                if student.user.telegram_id:
                    try:
                        bot.send_message(
                            student.user.telegram_id,
                            f"‚ùå –°–æ–±—ã—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ:\n{event_title}\n"
                            f"–î–∞—Ç–∞: {event.date.strftime('%d.%m.%Y %H:%M')}\n"
                            f"–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {event.teacher.user.secondName} {event.teacher.user.firstname} {event.teacher.user.middlename}"
                        )
                    except Exception as e:
                        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å {student.user.telegram_id}: {str(e)}")
                        
    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {str(e)}", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data == "cancel_delete")
def cancel_deletion(call):
    """–û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏—è"""
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    )

submission_data = {}

@bot.message_handler(commands=['send_file'])
@require_auth
def initiate_submission(message):
    telegram_id = message.chat.id
    try:
        user = User.objects.get(telegram_id=telegram_id)
        student = Student.objects.get(user=user)
    except (User.DoesNotExist, Student.DoesNotExist):
        bot.send_message(telegram_id, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º.")
        return

    teachers = Teacher.objects.all()
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True)
    for t in teachers:
        full_name = f"{t.user.secondName} {t.user.firstname[0]}.{t.user.middlename[0]}."
        markup.add(types.KeyboardButton(full_name))

    bot.send_message(telegram_id, "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è:", reply_markup=markup)

    bot.register_next_step_handler(message, handle_teacher_selection)

def handle_teacher_selection(message):
    telegram_id = message.chat.id
    input_text = message.text.strip()

    selected_teacher = None
    for teacher in Teacher.objects.select_related('user').all():
        firstname = teacher.user.firstname or ""
        secondname = teacher.user.secondName or ""
        middlename = teacher.user.middlename or ""
        full_name = f"{secondname} {firstname[0]}.{middlename[0]}."
        if full_name == input_text:
            selected_teacher = teacher
            break

    if not selected_teacher:
        bot.send_message(telegram_id, "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        initiate_submission(message)
        return

    submission_data[telegram_id] = {'teacher': selected_teacher}

    bot.send_message(telegram_id, "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ–∞–π–ª–∞:")
    bot.register_next_step_handler(message, handle_description_input)

def handle_description_input(message):
    telegram_id = message.chat.id
    submission_data[telegram_id]['description'] = message.text
    bot.send_message(telegram_id, "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª:")
    bot.register_next_step_handler(message, handle_file_upload)

def handle_file_upload(message):
    telegram_id = message.chat.id

    if not message.document:
        bot.send_message(telegram_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç.")
        bot.register_next_step_handler(message, handle_file_upload)
        return

    file_id = message.document.file_id
    file_info = bot.get_file(file_id)
    file_data = bot.download_file(file_info.file_path)
    file_name = message.document.file_name

    file_path = os.path.join(settings.MEDIA_ROOT, 'submissions', file_name)
    os.makedirs(os.path.dirname(file_path), exist_ok=True)
    with open(file_path, 'wb') as f:
        f.write(file_data)

    submission_data[telegram_id]['file_path'] = file_path
    submission_data[telegram_id]['file_name'] = file_name

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_submission"))
    markup.add(types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_submission"))
    bot.send_message(telegram_id, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: call.data in ["confirm_submission", "cancel_submission"])
def handle_submission_confirmation(call):
    telegram_id = call.message.chat.id
    data = submission_data.get(telegram_id)

    if call.data == "cancel_submission":
        submission_data.pop(telegram_id, None)
        bot.edit_message_text("–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", telegram_id, call.message.message_id)
        return

    if data:
        user = User.objects.get(telegram_id=telegram_id)
        student = Student.objects.get(user=user)

        submission = StudentSubmission.objects.create(
            student=student,
            teacher=data['teacher'],
            description=data['description'],
        )
        submission.file.name = f"submissions/{os.path.basename(data['file_path'])}"
        submission.save()

        if data['teacher'].user.telegram_id:
            bot.send_message(
                data['teacher'].user.telegram_id,
                f"üì• –ù–æ–≤—ã–π —Ñ–∞–π–ª –æ—Ç {student.user.secondName} {student.user.firstname} {student.user.middlename}:\n–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}"
            )
            with open(data['file_path'], 'rb') as f:
                bot.send_document(data['teacher'].user.telegram_id, f)

        bot.edit_message_text("–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!", telegram_id, call.message.message_id)
        submission_data.pop(telegram_id, None)

@bot.message_handler(commands=['received_files'])
@require_auth
def view_received_files(message):
    telegram_id = message.chat.id
    try:
        user = User.objects.get(telegram_id=telegram_id)
        teacher = Teacher.objects.get(user=user)
    except (User.DoesNotExist, Teacher.DoesNotExist):
        bot.send_message(telegram_id, "–¢–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –º–æ–≥—É—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.")
        return

    cutoff = now() - timedelta(days=30)

    submissions = StudentSubmission.objects.filter(teacher=teacher, created_at__gte=cutoff).order_by('-created_at')

    if not submissions.exists():
        bot.send_message(telegram_id, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –Ω–µ—Ç –Ω–æ–≤—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫.")
        return

    for sub in submissions:
        local_dt = sub.created_at.astimezone(MOSCOW_TZ)
        text = (
            f"üë§ –°—Ç—É–¥–µ–Ω—Ç: {sub.student.user.secondName} {sub.student.user.firstname} {sub.student.user.middlename}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {sub.description}\n"
            f"üìÖ –î–∞—Ç–∞: {local_dt.strftime('%d.%m.%Y %H:%M')}"
        )
        try:
            bot.send_message(telegram_id, text)
            if sub.file:
                with open(sub.file.path, 'rb') as f:
                    bot.send_document(telegram_id, f)
        except Exception as e:
            bot.send_message(telegram_id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("event_yes_") or call.data.startswith("event_no_"))
def handle_event_response(call):
    try:
        response = 'yes' if call.data.startswith("event_yes_") else 'no'
        event_id = int(call.data.split('_')[-1])
        user = User.objects.get(telegram_id=call.message.chat.id)
        student = Student.objects.get(user=user)
        event = Event.objects.get(id=event_id)

        er, _ = EventResponse.objects.get_or_create(event=event, student=student)
        er.response = response
        er.save()

        status_text = "‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ." if response == 'yes' else "‚ùå –í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —É—á–∞—Å—Ç–∏—è."

        # –ó–∞–º–µ–Ω–∏–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        updated_text = f"–í—ã –ø—Ä–∏–º–µ—Ç–µ —É—á–∞—Å—Ç–∏–µ?\n\n{status_text}"

        bot.edit_message_text(
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            text=updated_text
        )

        # –£–±–∏—Ä–∞–µ–º "–∑–∞–≥—Ä—É–∑–∫—É"
        bot.answer_callback_query(call.id)

    except Exception as e:
        bot.answer_callback_query(call.id, f"–û—à–∏–±–∫–∞: {e}", show_alert=True)


@bot.message_handler(commands=['responses'])
@require_auth
def view_event_responses(message):
    telegram_id = message.chat.id
    try:
        user = User.objects.get(telegram_id=telegram_id)
        teacher = Teacher.objects.get(user=user)

        events = Event.objects.filter(teacher=teacher).order_by('-date')
        if not events:
            bot.send_message(telegram_id, "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π.")
            return

        markup = types.InlineKeyboardMarkup()
        for e in events:
            markup.add(types.InlineKeyboardButton(
                f"{e.title} ({e.date.strftime('%d.%m.%Y')})",
                callback_data=f"view_responses_{e.id}"
            ))
        bot.send_message(telegram_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±—ã—Ç–∏–µ:", reply_markup=markup)

    except Exception as e:
        bot.send_message(telegram_id, f"–û—à–∏–±–∫–∞: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith("view_responses_"))
def show_event_responses(call):
    bot.answer_callback_query(call.id)
    try:
        event_id = int(call.data.split('_')[-1])
        event = Event.objects.get(id=event_id)
        responses = EventResponse.objects.filter(event=event).select_related("student__user")

        yes = [r.student.user.get_full_name() for r in responses if r.response == 'yes']
        no = [r.student.user.get_full_name() for r in responses if r.response == 'no']
        pending = [r.student.user.get_full_name() for r in responses if r.response == 'pending']

        message = (
            f"üìÖ {event.title} ({event.date.strftime('%d.%m.%Y %H:%M')})\n\n"
            f"‚úÖ –ü—Ä–∏–¥—É—Ç:\n" + ("\n".join(yes) or "‚Äî") + "\n\n"
            f"‚ùå –û—Ç–∫–∞–∑–∞–ª–∏—Å—å:\n" + ("\n".join(no) or "‚Äî") + "\n\n"
            f"‚ùì –ë–µ–∑ –æ—Ç–≤–µ—Ç–∞:\n" + ("\n".join(pending) or "‚Äî")
        )
        bot.send_message(call.message.chat.id, message)

    except Exception as e:
        bot.send_message(call.message.chat.id, f"–û—à–∏–±–∫–∞: {e}")



# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def start_bot():
    set_bot_commands()
    
    if os.environ.get('WERKZEUG_RUN_MAIN') == 'true' or os.environ.get('RUN_MAIN') == 'true':
        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        try:
            bot.polling(none_stop=True, skip_pending=True)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")

import atexit

def stop_bot():
    try:
        bot.stop_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: {e}")

atexit.register(stop_bot)